#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#pragma warning(disable:4996)
#pragma warning(disable:6011)
#pragma warning(disable:6054)
#pragma warning(disable:6386)
#pragma warning(disable:6031)


typedef struct stacknode {
	char arr[1000];
	int top;
}st;

int isOpen(char e) {
	if (e == '[' || e == '{' || e == '(') {
		return 1;
	}
	return 0;
}

int isClose(char e) {
	if (e == ']' || e == '}' || e == ')') {
		return 1;
	}
	return 0;
}

st* init() {
	st* tmp = (st*)malloc(sizeof(st));
	tmp->top = -1;
	return tmp;
}

void push(st* s, char elem) {
	s->top++;
	s->arr[s->top] = elem;
}

char pop(st* s) {
	char e = s->arr[s->top];
	s->top--;
	return e;
}

int isEmpty(st* s) {
	return s->top == -1;
}

int isCounter(char a, char b) {
	if (a == ')') {
		if (b == '(') {
			return 1;
		}
	}
	else if (a == '}') {
		if (b == '{') {
			return 1;
		}
	}
	else if (a == ']') {
		if (b == '[') {
			return 1;
		}
	}
	return 0;
}

int isBalanced(char str[], int len) {
	int i;
	char p;
	st* s = init();
	for (i = 0; i < len+1; i++) {
		if (isOpen(str[i])) {
			push(s, str[i]);
		}
		else if (isClose(str[i])) {
			if (isEmpty(s)) {
				return 0;
			}
			p = pop(s);//open
			if (isCounter(str[i], p) == 0) {
				return 0;
			}
		}
	}
	return isEmpty(s);
}

int main() {
	int count = 0;
	char str[1001];
	gets(str);
	int i;
	int len = strlen(str);

	for (i = 0; i < len; i++) {
		if (isOpen(str[i])){
			count++;
		}
		else if (isClose(str[i])) {
			count++;
		}
	}

	if (isBalanced(str, len)) {
		printf("OK_%d", count);
	}
	else {
		printf("Wrong_%d", count);
	}


	return 0;
}
